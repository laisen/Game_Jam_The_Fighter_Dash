#version 420

uniform mat4 matModel;		// Model or World 
uniform mat4 matModelInverseTranspose;		// For normal calculation
uniform mat4 matView; 		// View or camera
uniform mat4 matProj;		// Projection transform
uniform mat4 lightSpaceMatrix;		// For shadow mapping

uniform mat4 matModelInstance[150];		// For particles instancing
uniform bool bInstancing;

in vec4 vColour;
in vec4 vPosition;
in vec4 vNormal;				// Vertex normal
in vec4 vUVx2;					// 2 x Texture coords
in vec4 vTangent;				// For normal mapping
in vec4 vBitangent;				// For normal mapping
in vec4 vBoneID;				// For skinned mesh (FBX)
in vec4 vBoneWeight;			// For skinned mesh (FBX)
const int MaxBones = 100;
uniform mat4 matBonesArray[MaxBones];

uniform bool isSkinnedMesh;

out vec4 fColour;	
out vec4 fVertWorldLocation;
out vec4 fNormal;
out vec4 fUVx2;
out mat3 TBN;
out vec4 FragPosLightSpace;
flat out uint instanceID;

uniform bool bFullscreenQuadPass;

void main()
{
    mat4 matMVP = matProj * matView * matModel;
	if(bInstancing)
	{
		matMVP = matProj * matView * matModelInstance[gl_InstanceID];
		instanceID = gl_InstanceID;		// Pass to Frag
	}
		

	vec3 theNormal = normalize(vNormal.xyz);
	vec3 theTangent = normalize(vTangent.xyz);
	vec3 theBitangent = normalize(-vBitangent.xyz);		// The bitangent generated by Assimp is flipped to OpenGL normal map standard (DirectX format)
	vec4 T, B;

	if (isSkinnedMesh)
	{		
		mat4 BoneTransform = matBonesArray[ int(vBoneID[0]) ] * vBoneWeight[0];
		     BoneTransform += matBonesArray[ int(vBoneID[1]) ] * vBoneWeight[1];
		     BoneTransform += matBonesArray[ int(vBoneID[2]) ] * vBoneWeight[2];
		     BoneTransform += matBonesArray[ int(vBoneID[3]) ] * vBoneWeight[3];

		// Apply the bone transform to the vertex:
		vec4 vertAfterBoneTransform = BoneTransform * vPosition;
		fVertWorldLocation = matModel * vertAfterBoneTransform;

		// Transform the updated vertex location (from the bone) and transform with model view projection matrix (as usual)
		gl_Position = matMVP * vertAfterBoneTransform;			
		
		// Updated "world" or "model" transform 
		mat4 matModelAndBone = matModel * BoneTransform;		
		
		fNormal = inverse(transpose(matModelAndBone)) * vec4(theNormal, 1.0f);
		T = inverse(transpose(matModelAndBone)) * vec4(theTangent, 1.0f);
		B = inverse(transpose(matModelAndBone)) * vec4(theBitangent, 1.0f);		
	}
	else
	{
		if(bFullscreenQuadPass)
		{
			gl_Position = vec4(vPosition.x, vPosition.y, 0.0, 1.0); 
		}
		else
		{
			gl_Position = matMVP * vPosition;
		}
		
		fVertWorldLocation = matModel * vPosition;	
		
 		fNormal = matModelInverseTranspose * vec4(theNormal, 1.0f);
		T = matModelInverseTranspose * vec4(theTangent, 1.0f);
		B = matModelInverseTranspose * vec4(theBitangent, 1.0f);
		
	}	
	
	fColour = vColour;	
	fUVx2 = vUVx2;
	fNormal.xyz = normalize(fNormal.xyz);
	T.xyz = normalize(T.xyz);
	B.xyz = normalize(B.xyz);	
	TBN = mat3(T.xyz, B.xyz, fNormal.xyz);
	FragPosLightSpace = lightSpaceMatrix * fVertWorldLocation;
}
